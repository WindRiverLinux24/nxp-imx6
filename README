	 i.MX6 UltraLite 14x14 EVK / i.MX6SX Sabre-SDB / i.MX6Q Sabre-SD Board Support Package

1. About this document
======================

This document describes common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River
Linux and the wr-kernel layer.

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the nxp-imx6 layer
---------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.

License
-------
Copyright (C) 2023 Wind River Systems, Inc.

Source code included in the tree for individual recipes is under the LICENSE
stated in the associated recipe (.bb file) unless otherwise stated.

The metadata is under the following license unless otherwise stated.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        Y         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype can be used for this BSP/Machine.


3. Board Specific Patches
=========================
To get a list of patches applied to the kernel specific to this BSP,
along with patch descriptions, use git to see what changed on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

	# cd tmp-glibc/work-shared/nxp-imx6/kernel-source
	# git whatchanged standard/base..


4. Boot Instructions
====================

4.1 MMC/SD Boot
---------------
Please refer to section 6 "Creating Partitioned Images(WIC)" in this document to
make a bootable MMC/SD card.

4.2 NFS Root File System
------------------------

4.2.1 Prepare Kernel, DTB, NFS and TFTP servers
-----------------------------------------------
The files in the following example can be found in <buildprj>/tmp-glibc/deploy/images/nxp-imx6
and are copied to the export directory of the TFTP server.

4.2.2 Download kernel
---------------------
	For i.MX6 UltraLite:
	# tftpboot 0x80800000 zImage
	For i.MX6SX:
        # tftp 0x92000000 zImage
	For i.MX6Q:
	# tftp 0x12000000 zImage

4.2.3 Download DTB
------------------
	For i.MX6 UltraLite:
	tftpboot 0x83000000 imx6ul-14x14-evk.dtb
	For i.MX6SX:
        # tftp 0x98000000 imx6sx-sdb.dtb
	For i.MX6Q:
	# tftp 0x18000000 imx6q-sabresd.dtb

4.2.4 Set bootargs and boot the system
--------------------------------------
	For i.MX6 UltraLite:
	# setenv bootargs console=ttymxc0,115200 root=/dev/nfs rw \
                 nfsroot=<nfs server>:<nfs root> \
                 ip=<target IP>::<gateway>:<netmask>::eth0:off \
	#bootz 0x80800000 - 0x83000000
	For i.MX6SX:
        # setenv bootargs console=ttymxc0,115200 root=/dev/nfs rw \
                 nfsroot=<nfs server>:<nfs root> \
                 ip=<target IP>::<gateway>:<netmask>::eth0:off \
                 video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666
	bootz 0x92000000 - 0x98000000
	For i.MX6Q:
	# setenv bootargs console=ttymxc0,115200 root=/dev/nfs rw \
		 nfsroot=<nfs server>:<nfs root> \
		 ip=<target IP>::<gateway>:<netmask>::eth0:off \
		 video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666
	# bootz 0x12000000 - 0x18000000

5. Features
===========

5.1 Static PM
-------------

The debug UART can be set as a wakeup source with:
	# echo enabled > /sys/class/tty/ttymxc0/power/wakeup
	# echo mem > /sys/power/state

5.2 CPU frequency
------------------

CPU frequency scaling allows the clock speed of the CPU to be changed on the fly.

	# echo powersave > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
	# cat /proc/cpuinfo

5.3 ANATOP thermal
-------------------

	To check current CPU temperature
	# cd /sys/class/thermal/thermal_zone0
	# cat temp
	39821
	# cat trip_point_0_type
	passive
	# cat trip_point_0_temp
	95000

5.4 USB feature
---------------

5.4.1 USB OTG Usage and verification
------------------------------------

1. Verify the OTG device mode

Plug in cable B and connect to the host machine.

Board configuration:

        # ifconfig usb0 192.168.1.10

Host machine configuration:

        # sudo ifconfig usb0 192.168.1.100
        # ping 192.168.1.10 -c 2
        PING 192.168.1.10 (192.168.1.10) 56(84) bytes of data.
        64 bytes from 192.168.1.10: icmp_req=1 ttl=64 time=2.06 ms
        64 bytes from 192.168.1.10: icmp_req=2 ttl=64 time=0.286 ms
        ...

2. Switch to OTG host mode

Replace cable B with cable A.

5.5 Audio
---------
Play audio messages:

For imx6ul, enable Output Mixer PCM like the following:
amixer sset 'Right Output Mixer PCM' on
amixer sset 'Left Output Mixer PCM' on

        # aplay -Dhw:0,0 stereo1644s.wav

5.6 Backlight
--------------

        # echo 0 > /sys/class/backlight/backlight/brightness

5.7 PCIe
--------

Since the on-board PCIe connector only exports the PETP0/N0, PERP0/N0 and 3.3V
pins, any mini-PCIe devices that use other PCIe pins are not supported.
The following PCIe peripherals:

        Intel Centrino Advanced-N 6205
        Intel Centrino Wireless-N 1030

can be validated using the following steps:

Simply add line as follows to ${buildprj}/build/conf/local.conf:

        KERNEL_FEATURES_append = " features/iwlwifi/iwlwifi.scc"

This will include the iwlwifi and mac80211 kernel modules in
the root filesystem.

echo IMAGE_INSTALL += "linux-firmware-iwlwifi" >> conf/local.conf
This will add relevant WiFi card firmware (Intel 6205 WiFi firmware: iwlwifi-6000g2a-5.ucode) 

Built and install them:

        # bitbake wrlinux-image-glibc-xxx

Execute the following commands to validate the WiFi cards:

        # ifconfig wlan0 up
        # iwconfig wlan0 essid <AP essid>
        # dhclient wlan0
        # ping <AP address> -i wlan0 -c 1

NOTE: the PCIe driver does not support hotplug and suspend/resume.

5.8 Camera test note
--------------------

If we use gstream to record video, $V4L2SRC should be imxv4l2src.

5.9 fbdev HDMI & LVDS
---------------------

To enable HDMI as the default framebuffer device, add:

	video=mxcfb1:dev=hdmi,1920x1080M@60,if=RGB24

To enable LVDS as the default framebuffer device, add:

	video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666

to the bootargs parameter of U-Boot

5.10 Graphics
-------------

If you want to build a project with i.mx6 GPU graphic support, please
follow the steps as below:

Create a project directory, and then setup project with the following arguments:

        --machines nxp-imx6 --distros wrlinux-graphics --dl-layers

Setup environment and create a build directory:

        # . environment-setup-<host>-wrlinuxsdk-linux
        # . oe-init-build-env <build>
        # bitbake wrlinux-image-std-sato

5.11 GPU
--------
Because of the licesen issue, nxp-imx6 layer doesn't integrate imx6's GPU(GC400T) or VPU
hardware acceleration related packages into WRlinux product. So, if customer wants
to run hardware graphic feature. Detail steps as below:

<1> You must change the configuration to allow downloading of packages from the
internet. Change BB_NO_NETWORK ?= "1" to BB_NO_NETWORK ?= "0" in the file
${buildprj}/conf/local.conf.

<2> echo the following content to local.conf:

ACCEPT_FSL_EULA = "1"
MACHINEOVERRIDES:prepend:nxp-imx6 = "imxfbdev:imxipu:imxvpu:imxvpucnm:imxgpu:imxgpu2d:imxgpu3d:mx6:mx6sx:mx6sl:mx6ul:mx6ull:mx6q:mx6dl:use-nxp-bsp:mx6q-nxp-bsp:mx6sx-nxp-bsp:mx6-nxp-bsp:"

IMAGE_INSTALL:append = " assimp devil imx-gpu-viv imx-gpu-g2d imx-gpu-sdk imx-vpu imx-gpu-viv-demos weston weston-init imx-gst1.0-plugin gstreamer1.0 gstreamer1.0-plugins-good gstreamer1.0-plugins-base"

MACHINE_SOCARCH = "nxp_imx6"

PREFERRED_PROVIDER_virtual/egl:nxp-imx6 = "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgles1:nxp-imx6 = "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgles2:nxp-imx6 = "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libgl:nxp-imx6 = "imx-gpu-viv"
PREFERRED_PROVIDER_virtual/libg2d:nxp-imx6 = "imx-gpu-g2d"
PREFERRED_VERSION_gstreamer1.0-plugins-base:mx6 = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-bad:mx6  = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0-plugins-good:mx6 = "1.22.0.imx"
PREFERRED_VERSION_gstreamer1.0:mx6              = "1.22.0.imx"
PREFERRED_VERSION_vulkan-headers:mx6  = "1.2.182.0"
PREFERRED_VERSION_vulkan-loader:mx6 = "1.2.182.0"
PREFERRED_VERSION_libdrm:mx6 = "2.4.114.imx"
PREFERRED_VERSION_weston:mx6 = "10.0.3.imx"
PREFERRED_VERSION_wayland-protocols:mx6 = "1.31.imx"
PREFERRED_PROVIDER_virtual/opencl-icd:imxgpu ?= "imx-gpu-viv"
PREFERRED_PROVIDER_opencl-icd-loader:imxgpu  ?= "imx-gpu-viv"

DISTRO_FEATURES:remove = "directfb x11"
DISTRO_FEATURES:append = " wayland pam"
MACHINE_HAS_VIVANTE_KERNEL_DRIVER_SUPPORT = "1"
IMAGE_FEATURES:remove = "x11-base  x11-sato"
IMAGE_FEATURES:append = " weston"

# QA check settings - a little stricter than the OE-Core defaults
WARN_TO_ERROR_QA = "already-stripped compile-host-path install-host-path \
                    installed-vs-shipped ldflags pn-overrides rpaths staticdev \
                    useless-rpaths"
WARN_QA:remove = "${WARN_TO_ERROR_QA}"
ERROR_QA:append = " ${WARN_TO_ERROR_QA}"

CUSTOMER_RECIPES:openembedded-layer += 'freeglut'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv'
CUSTOMER_RECIPES:fsl-bsp-release += 'mesa'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-viv-demos'
CUSTOMER_RECIPES:fsl-sdk-release += 'imx-gpu-sdk'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gpu-g2d'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-dpu-g2d'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-vpu'
CUSTOMER_RECIPES:freescale-distro-layer += 'assimp'
CUSTOMER_RECIPES:fsl-sdk-release += 'devil'
CUSTOMER_RECIPES:freescale-layer += 'imx-lib'
CUSTOMER_RECIPES:fsl-bsp-release += 'systemd-gpuconfig'
CUSTOMER_RECIPES:fsl-bsp-release += 'fmt'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-gst1.0-plugin'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-parser'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-codec'
CUSTOMER_RECIPES:fsl-bsp-release += 'imx-vpuwrap'
CUSTOMER_RECIPES:freescale-layer += 'linux-imx-headers'
CUSTOMER_RECIPES:openembedded-layer += 'ccid'
CUSTOMER_RECIPES:openembedded-layer += 'pcsc-lite'
CUSTOMER_RECIPES:openembedded-layer += 'spirv-tools'
CUSTOMER_RECIPES:freescale-distro-layer += 'glslang'
CUSTOMER_RECIPES:fsl-bsp-release += 'wayland-protocols'
CUSTOMER_RECIPES:fsl-bsp-release += 'libdrm'
CUSTOMER_RECIPES:openembedded-layer += 'nlohmann-json'
CUSTOMER_RECIPES:openembedded-layer += 'fmt'
CUSTOMER_RECIPES:openembedded-layer += 'googletest'
CUSTOMER_RECIPES:openembedded-layer += 'rapidjson'
CUSTOMER_RECIPES:openembedded-layer += 'glm'
CUSTOMER_RECIPES:fsl-sdk-release += 'rapidvulkan'
CUSTOMER_RECIPES:freescale-distro-layer += 'rapidopencl'
CUSTOMER_RECIPES:fsl-sdk-release += 'gli'
CUSTOMER_RECIPES:freescale-distro-layer += 'rapidopenvx'
CUSTOMER_RECIPES:fsl-sdk-release += 'vulkan-validationlayers'
CUSTOMER_RECIPES:fsl-bsp-release += 'linux-imx-headers'
CUSTOMER_RECIPES:openembedded-layer += 'vulkan-headers'
CUSTOMER_RECIPES:fsl-sdk-release += 'vulkan-loader'
CUSTOMER_RECIPES:openembedded-layer += 'vulkan-tools'
CUSTOMER_RECIPES:fsl-bsp-release += 'weston-init'
CUSTOMER_RECIPES:fsl-bsp-release += 'weston'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-base'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-base'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-good'
CUSTOMER_RECIPES:fsl-bsp-release += 'gstreamer1.0-plugins-bad'
CUSTOMER_RECIPES:fsl-bsp-release += 'freerdp'
CUSTOMER_RECIPES:openembedded-layer += 'libxaw'
CUSTOMER_RECIPES:openembedded-layer += 'xterm'
CUSTOMER_RECIPES:meta-python += 'python3-wheel'
CUSTOMER_RECIPES:meta-python += 'python3-pybind11'
CUSTOMER_RECIPES:openembedded-layer += 'can-utils'
CUSTOMER_RECIPES:openembedded-layer += 'libsocketcan'
CUSTOMER_RECIPES:freescale-distro += 'assimp'
CUSTOMER_RECIPES:freescale-distro += 'devil'
CUSTOMER_RECIPES:fsl-sdk-release += 'libxdg-shell'
CUSTOMER_RECIPES:freescale-distro += 'half'
CUSTOMER_RECIPES:freescale-distro += 'stb'

<3> Use the command as below to build rootfs:

        bitbake wrlinux-image-std-sato

NOTE:

1. You must change the configuration to allow downloading of packages from the
internet. Change BB_NO_NETWORK ?= "1" to BB_NO_NETWORK ?= "0" in the file
${buildprj}/conf/local.conf.

2. Since some packages which are used to support the graphic feature in
nxp-imx6 are provided via binaries, when a nxp-imx6 project with
graphic support is built, there will be error info as below:
-----------ERROR--------------
ERROR: imx-gpu-viv_6.4.0.p1.0-aarch32 do_unpack: To use 'imx-gpu-viv' you need to accept the Freescale EULA at 'path_to_WRLinux_product/layers/meta-freescale/EULA'. Please read it and in case you accept it, write: ACCEPT_FSL_EULA = "1" in your local.conf.
------------------------------
Please read the Freescale EULA file carefully, in case you accept it, write:
ACCEPT_FSL_EULA = "1" to your local.conf file to continue the building.

6. kexec/kdump
==============

For discussion purposes, some useful terminology will be described here.

* boot kernel - the first kernel that you start and supports kexec, from U-Boot
              for instance
* capture kernel - the kernel that you reboot into after a boot kernel crash

To build the boot kernel, enable kexec and kdump in your local.conf file:

        WRTEMPLATE = "feature/kexec feature/kdump"

6.1 kdump
---------

For the boot kernel:
To reserve a memory region for the capture kernel, you need to pass the bootargs
argument "crashkernel" to the boot kernel as follow:
 - Without graphic hardware accelerator
for I.MX6SX:
    crashkernel=180M
for I.MX6UL:
    crashkernel=128M
for I.MX6Q:
    crashkernel=180M

For the dump-capture kernel:
Before booting the dump-capture kernel, add "maxcpus=1 cma=16M" to the boot parameter.
NOTE: Use zImage as a secondary kernel. It can be found in the
tmp-glibc/deploy/images/nxp-imx6/ directory.

For more detailed info about kdump, refer to Documentation/kdump/kdump.txt
in the kernel source tree.

6. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

https://www.yoctoproject.org/docs/2.6/mega-manual/mega-manual.html#creating-partitioned-images-using-wic

This BSP supports disk images for SD card.
After building the project, user will get a WIC image under the directory
tmp-glibc/deploy/images/<bsp name>/ ,such as:

tmp-glibc/deploy/images/nxp-imx6/wrlinux-image-std-nxp-imx6.wic

Then user can write the output image to a SD card:

7.1 Burn images to SD card
--------------------------

To burn uboot and WIC images to SD card, user need to execute command:
# dd if=wrlinux-image-std-nxp-imx6-{machine}.wic of=/dev/your_sd_dev

7.2 Set uboot env
-----------------

Board can boot automatically by set the below uboot environment variables:

For i.mx6ul
=> setenv bootfile zImage; setenv fdtfile imx6ul-14x14-evk.dtb;  setenv loadaddr 0x80800000; setenv fdtaddr 0x83000000;
=> setenv bootargs 'root=/dev/mmcblk1p2 rw rootdelay=5 console=ttymxc0,115200n8'
=> setenv bootcmd 'fatload mmc 1:1 $loadaddr $bootfile; fatload mmc 1:1 $fdtaddr $fdtfile; bootz $loadaddr - $fdtaddr';
=> saveenv; run bootcmd;

For i.mx6sx
=> setenv bootfile zImage; setenv fdtfile imx6sx-sdb.dtb;  setenv loadaddr 0x92000000; setenv fdtaddr 0x98000000;
=> setenv bootargs 'root=/dev/mmcblk3p2 rw rootdelay=5 console=ttymxc0,115200n8'
=> setenv bootcmd 'fatload mmc 3:1 $loadaddr $bootfile; fatload mmc 3:1 $fdtaddr $fdtfile; bootz $loadaddr - $fdtaddr';
=> saveenv; run bootcmd;

For i.mx6q
=> setenv bootfile zImage; setenv fdtfile imx6q-sabresd.dtb;  setenv loadaddr 0x12000000; setenv fdtaddr 0x18000000;
=> setenv bootargs 'root=/dev/mmcblk2p2 rw rootdelay=5 console=ttymxc0,115200n8'
=> setenv bootcmd 'fatload mmc 2:1 $loadaddr $bootfile; fatload mmc 2:1 $fdtaddr $fdtfile; bootz $loadaddr - $fdtaddr';
=> saveenv; run bootcmd;
